//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Feng Wu/InputAction/FW_test.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FW_test : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FW_test()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FW_test"",
    ""maps"": [
        {
            ""name"": ""ActionMaps"",
            ""id"": ""510f79df-08a0-471f-b859-a054adced19f"",
            ""actions"": [
                {
                    ""name"": ""LeftController_X"",
                    ""type"": ""Button"",
                    ""id"": ""0ddc1064-6b61-449d-8185-e680ff0264d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""52ef8e8d-58bb-46e8-9e71-699dac865013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a7daf7a-fce3-4b4f-a104-503738c2ee42"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftController_X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98af74b1-0570-49f2-9cff-71ff133a33ad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38ed0695-0018-4372-baee-89e0da48d59d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Default"",
            ""id"": ""1d86afb7-890f-4a9e-96de-902b3921cd45"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""42edf274-c394-494d-bf25-b1331ed1206b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""914ecfe7-69fd-40bc-9352-6052557f5226"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Explosion"",
                    ""type"": ""Button"",
                    ""id"": ""04e9a99f-26fc-4981-8119-73115e07f300"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""83ecbd15-6b11-4a22-ab2e-a887f2eace9f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3cc3d166-b348-4ccd-a829-8ab6e2d7685c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1941b693-821e-4154-a4ec-9340f22338b3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f9fd754c-bb5c-41ff-8df1-d8bb7f862091"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4c2325b-d146-45ce-8b6b-15334836571f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""51e1f4d7-dd45-43a4-b159-df070b1f8c22"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc8762e4-47ed-43bf-91f9-e823864fa83a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""673b5fd6-0095-484f-828b-c65162ced07f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""80273c0d-1e99-4a79-9742-d6f67de18b9a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""37548731-9497-4445-9790-1b74ae4d921e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b5477df5-dbae-437d-9e5a-984fb75229bc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""FW_test"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2d71731-ac2d-4a89-87c2-509272dab0c6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Explosion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""FW_test"",
            ""bindingGroup"": ""FW_test"",
            ""devices"": []
        }
    ]
}");
        // ActionMaps
        m_ActionMaps = asset.FindActionMap("ActionMaps", throwIfNotFound: true);
        m_ActionMaps_LeftController_X = m_ActionMaps.FindAction("LeftController_X", throwIfNotFound: true);
        m_ActionMaps_Jump = m_ActionMaps.FindAction("Jump", throwIfNotFound: true);
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Move = m_Default.FindAction("Move", throwIfNotFound: true);
        m_Default_Jump = m_Default.FindAction("Jump", throwIfNotFound: true);
        m_Default_Explosion = m_Default.FindAction("Explosion", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMaps
    private readonly InputActionMap m_ActionMaps;
    private IActionMapsActions m_ActionMapsActionsCallbackInterface;
    private readonly InputAction m_ActionMaps_LeftController_X;
    private readonly InputAction m_ActionMaps_Jump;
    public struct ActionMapsActions
    {
        private @FW_test m_Wrapper;
        public ActionMapsActions(@FW_test wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftController_X => m_Wrapper.m_ActionMaps_LeftController_X;
        public InputAction @Jump => m_Wrapper.m_ActionMaps_Jump;
        public InputActionMap Get() { return m_Wrapper.m_ActionMaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapsActions set) { return set.Get(); }
        public void SetCallbacks(IActionMapsActions instance)
        {
            if (m_Wrapper.m_ActionMapsActionsCallbackInterface != null)
            {
                @LeftController_X.started -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnLeftController_X;
                @LeftController_X.performed -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnLeftController_X;
                @LeftController_X.canceled -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnLeftController_X;
                @Jump.started -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ActionMapsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_ActionMapsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftController_X.started += instance.OnLeftController_X;
                @LeftController_X.performed += instance.OnLeftController_X;
                @LeftController_X.canceled += instance.OnLeftController_X;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public ActionMapsActions @ActionMaps => new ActionMapsActions(this);

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Move;
    private readonly InputAction m_Default_Jump;
    private readonly InputAction m_Default_Explosion;
    public struct DefaultActions
    {
        private @FW_test m_Wrapper;
        public DefaultActions(@FW_test wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Default_Move;
        public InputAction @Jump => m_Wrapper.m_Default_Jump;
        public InputAction @Explosion => m_Wrapper.m_Default_Explosion;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                @Explosion.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnExplosion;
                @Explosion.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnExplosion;
                @Explosion.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnExplosion;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Explosion.started += instance.OnExplosion;
                @Explosion.performed += instance.OnExplosion;
                @Explosion.canceled += instance.OnExplosion;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    private int m_FW_testSchemeIndex = -1;
    public InputControlScheme FW_testScheme
    {
        get
        {
            if (m_FW_testSchemeIndex == -1) m_FW_testSchemeIndex = asset.FindControlSchemeIndex("FW_test");
            return asset.controlSchemes[m_FW_testSchemeIndex];
        }
    }
    public interface IActionMapsActions
    {
        void OnLeftController_X(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IDefaultActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnExplosion(InputAction.CallbackContext context);
    }
}
